{
	"info": {
		"_postman_id": "6322934f-9798-4286-9170-649eac6c39cd",
		"name": "Tercera Evaluacion",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39492999"
	},
	"item": [
		{
			"name": "Get Filter By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Verificar el codigo de estado\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Verificar el tiempo de respuesta\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// 3. Verificar el tipo de contenido\r",
							"pm.test(\"Content-Type header is 'text/xml'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/xml\");\r",
							"});\r",
							"\r",
							"// 4. Verificar la estructura del objeto de filtro\r",
							"pm.test(\"FilterObject has the required fields\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.FilterObject).to.exist;\r",
							"    pm.expect(responseData.FilterObject.Id).to.exist;\r",
							"    pm.expect(responseData.FilterObject.Content).to.exist;\r",
							"    pm.expect(responseData.FilterObject.ItemsCount).to.exist;\r",
							"    pm.expect(responseData.FilterObject.Icon).to.exist;\r",
							"    pm.expect(responseData.FilterObject.ItemType).to.exist;\r",
							"    pm.expect(responseData.FilterObject.Children).to.exist;\r",
							"});\r",
							"\r",
							"// 5. Verificar que Id cumple con los criterios esperados.\r",
							"pm.test(\"Id is a non-empty string\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.FilterObject.Id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{email}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/filters/{{filter_id}}.xml",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"filters",
						"{{filter_id}}.xml"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Items Of A Filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Verificar el código de estado\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Verificar el tipo de contenido\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// 3. Verificar el tiempo de respuesta\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// 4. Verificar la estructura del body\r",
							"pm.test(\"Validate the schema for the response body\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an('object');\r",
							"        pm.expect(item).to.have.property('Id');\r",
							"        pm.expect(item).to.have.property('Content');\r",
							"        pm.expect(item).to.have.property('ItemType');\r",
							"        pm.expect(item).to.have.property('Checked');\r",
							"        pm.expect(item).to.have.property('ProjectId');\r",
							"        pm.expect(item).to.have.property('ParentId');\r",
							"        pm.expect(item).to.have.property('Path');\r",
							"        pm.expect(item).to.have.property('Collapsed');\r",
							"        pm.expect(item).to.have.property('DateString');\r",
							"        pm.expect(item).to.have.property('DateStringPriority');\r",
							"        pm.expect(item).to.have.property('DueDate');\r",
							"        pm.expect(item).to.have.property('Recurrence');\r",
							"        pm.expect(item).to.have.property('ItemOrder');\r",
							"        pm.expect(item).to.have.property('Priority');\r",
							"        pm.expect(item).to.have.property('LastSyncedDateTime');\r",
							"        pm.expect(item).to.have.property('Children');\r",
							"        pm.expect(item).to.have.property('DueDateTime');\r",
							"        pm.expect(item).to.have.property('CreatedDate');\r",
							"        pm.expect(item).to.have.property('LastCheckedDate');\r",
							"        pm.expect(item).to.have.property('LastUpdatedDate');\r",
							"        pm.expect(item).to.have.property('Deleted');\r",
							"        pm.expect(item).to.have.property('Notes');\r",
							"        pm.expect(item).to.have.property('InHistory');\r",
							"        pm.expect(item).to.have.property('SyncClientCreationId');\r",
							"        pm.expect(item).to.have.property('DueTimeSpecified');\r",
							"        pm.expect(item).to.have.property('OwnerId');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Verificar el tamaño de la respuesta de body\r",
							"pm.test(\"The response body size should be greater than 0\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response body should not be empty\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{email}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/filters/{{filter_id}}/items.json",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"filters",
						"{{filter_id}}",
						"items.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Done Items of a Filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Verificar codigo de estado\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Verificar tiempo de respuesta\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// 3. Verificar tipo de contenido\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// 4. Verificar estructura del cuerpo de respuesta\r",
							"pm.test(\"Response body schema is as expected\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"  responseData.forEach(item => {\r",
							"    pm.expect(item).to.be.an('object');\r",
							"    pm.expect(item).to.have.property('Id');\r",
							"    pm.expect(item).to.have.property('Content');\r",
							"    pm.expect(item).to.have.property('ItemType');\r",
							"    pm.expect(item).to.have.property('Checked');\r",
							"    pm.expect(item).to.have.property('ProjectId');\r",
							"    pm.expect(item).to.have.property('ParentId');\r",
							"    pm.expect(item).to.have.property('Path');\r",
							"    pm.expect(item).to.have.property('Collapsed');\r",
							"    pm.expect(item).to.have.property('DateString');\r",
							"    pm.expect(item).to.have.property('DateStringPriority');\r",
							"    pm.expect(item).to.have.property('DueDate');\r",
							"    pm.expect(item).to.have.property('Recurrence');\r",
							"    pm.expect(item).to.have.property('ItemOrder');\r",
							"    pm.expect(item).to.have.property('Priority');\r",
							"    pm.expect(item).to.have.property('LastSyncedDateTime');\r",
							"    pm.expect(item).to.have.property('Children');\r",
							"    pm.expect(item).to.have.property('DueDateTime');\r",
							"    pm.expect(item).to.have.property('CreatedDate');\r",
							"    pm.expect(item).to.have.property('LastCheckedDate');\r",
							"    pm.expect(item).to.have.property('LastUpdatedDate');\r",
							"    pm.expect(item).to.have.property('Deleted');\r",
							"    pm.expect(item).to.have.property('Notes');\r",
							"    pm.expect(item).to.have.property('InHistory');\r",
							"    pm.expect(item).to.have.property('SyncClientCreationId');\r",
							"    pm.expect(item).to.have.property('DueTimeSpecified');\r",
							"    pm.expect(item).to.have.property('OwnerId');\r",
							"  });\r",
							"});\r",
							"\r",
							"// 5. Verificar campos esenciales\r",
							"pm.test(\"Id, Content, and Checked fields are present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(item => {\r",
							"        pm.expect(item).to.have.property('Id');\r",
							"        pm.expect(item).to.have.property('Content');\r",
							"        pm.expect(item).to.have.property('Checked');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{email}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/filters/{{filter_id}}/doneitems.json",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"filters",
						"{{filter_id}}",
						"doneitems.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Verificar codigo de estado\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Verificar tiempo de respuesta\r",
							"pm.test(\"Response time is within an acceptable range, under 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// 3. Verificar tipo de contenido\r",
							"pm.test(\"Response has the required headers\", function () {\r",
							"    pm.expect(pm.response).to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"// 4. Verificar estructura del cuerpo de respuesta\r",
							"pm.test(\"Validate the response schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(item => {\r",
							"        pm.expect(item).to.be.an('object');\r",
							"        pm.expect(item).to.have.property('Id');\r",
							"        pm.expect(item).to.have.property('Content');\r",
							"        pm.expect(item).to.have.property('ItemType');\r",
							"        pm.expect(item).to.have.property('Checked');\r",
							"        pm.expect(item).to.have.property('ProjectId');\r",
							"        pm.expect(item).to.have.property('ParentId');\r",
							"        pm.expect(item).to.have.property('Path');\r",
							"        pm.expect(item).to.have.property('Collapsed');\r",
							"        pm.expect(item).to.have.property('DateString');\r",
							"        pm.expect(item).to.have.property('DateStringPriority');\r",
							"        pm.expect(item).to.have.property('DueDate');\r",
							"        pm.expect(item).to.have.property('Recurrence');\r",
							"        pm.expect(item).to.have.property('ItemOrder');\r",
							"        pm.expect(item).to.have.property('Priority');\r",
							"        pm.expect(item).to.have.property('LastSyncedDateTime');\r",
							"        pm.expect(item).to.have.property('Children');\r",
							"        pm.expect(item).to.have.property('DueDateTime');\r",
							"        pm.expect(item).to.have.property('CreatedDate');\r",
							"        pm.expect(item).to.have.property('LastCheckedDate');\r",
							"        pm.expect(item).to.have.property('LastUpdatedDate');\r",
							"        pm.expect(item).to.have.property('Deleted');\r",
							"        pm.expect(item).to.have.property('Notes');\r",
							"        pm.expect(item).to.have.property('InHistory');\r",
							"        pm.expect(item).to.have.property('SyncClientCreationId');\r",
							"        pm.expect(item).to.have.property('DueTimeSpecified');\r",
							"        pm.expect(item).to.have.property('OwnerId');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Verificar que el contenido no es vacio\r",
							"pm.test(\"Content field is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.Content).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{email}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/items.json",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"items.json"
					]
				}
			},
			"response": []
		}
	]
}